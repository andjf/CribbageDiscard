{"version":3,"sources":["components/LeftRightButton.js","components/Card.js","Solver.js","components/Popup.js","components/CardCollection.js","components/ChooseNumberPlayers.js","App.js","index.js"],"names":["LeftRightButton","next","previous","className","onClick","SUITS","Card","number","suit","nextSuitFunction","nextNumberFunction","small","getDisplayCharacter","toString","CardObj","this","value","Math","min","NUMBERS","Scorer","cards","drawCard","length","undefined","Error","points","pointsFromFifteens","concat","pointsFromPairs","pointsFromRuns","pointsFromKnobs","pointsFromFlush","allCards","sameSuits","map","card","index","pop","every","val","hand","draw","i","total","j","start","end","without","toReturn","current","push","numbersBetweenWithout","first","second","third","indexesOfPossibleFifteens","createFifteensPossibleCombos","currentSetArray","currentSum","numbersOnly","sort","a","b","noDuplicates","duplicates","indexOf","maxStreak","currentNumber","currentStreak","duplicatesNoDuplicates","numberToGetCount","count","duplicateLength","numDuplicates","runLength","Decider","deck","indexToRemove","leftOverCards","splice","handCopy","scoresForEachCard","Array","fill","restOfCards","getFullDeckWithout","removeCardIndex","handWithout","removeCard","drawCardIndex","scoreHand","max","scoresForEachPair","manualCounter","handWithoutCards","indexOfMaximum","Popup","trigger","setTrigger","children","CardCollection","numberOfCards","useState","n","exists","numberTry","suitTry","floor","random","generateListOfRandomCards","setCards","currentIndex","setCurrentIndex","bestDiscards","setBestDiscards","newCards","cardObjects","ChooseNumberPlayers","App","numPlayers","setNumPlayers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a040111.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./LeftRightButton.css\";\r\n\r\nfunction LeftRightButton({ next, previous }) {\r\n  return (\r\n    <div className=\"navButtonContainer\">\r\n      <button onClick={previous} className=\"leftButton navButton\">\r\n        <strong className=\"arrowText\">{\"<\"}</strong>\r\n      </button>\r\n      <button onClick={next} className=\"rightButton navButton\">\r\n        <strong className=\"arrowText\">{\">\"}</strong>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeftRightButton;\r\n","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst SUITS = [\r\n  [\"♠\", \"♤\"],\r\n  [\"♥\", \"♡\"],\r\n  [\"♣\", \"♧\"],\r\n  [\"♦\", \"♢\"],\r\n];\r\n\r\nfunction Card({ number, suit, nextSuitFunction, nextNumberFunction, small }) {\r\n  function getDisplayCharacter(number) {\r\n    if (number === 1) {\r\n      return \"A\";\r\n    } else if (number === 11) {\r\n      return \"J\";\r\n    } else if (number === 12) {\r\n      return \"Q\";\r\n    } else if (number === 13) {\r\n      return \"K\";\r\n    } else {\r\n      return number.toString();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button className={small ? \"smallCard\" : \"card\"}>\r\n      <p\r\n        onClick={nextNumberFunction}\r\n        className={small ? \"smallNumber\" : \"number\"}\r\n      >\r\n        {getDisplayCharacter(number)}\r\n      </p>\r\n      <p\r\n        onClick={nextNumberFunction}\r\n        className={\r\n          (small ? \"smallNumber\" : \"number\") +\r\n          \" \" +\r\n          (small ? \"smallRotated\" : \"rotated\")\r\n        }\r\n      >\r\n        {getDisplayCharacter(number)}\r\n      </p>\r\n      <p\r\n        onClick={nextSuitFunction}\r\n        className={\r\n          (small ? \"smallSuit\" : \"suit\") + (suit % 2 ? \" red\" : \" black\")\r\n        }\r\n      >\r\n        {SUITS[suit][0]}\r\n      </p>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","// Old. Should be optimized\r\nclass CardObj {\r\n  static NUMBERS = [\r\n    \"A\",\r\n    \"2\",\r\n    \"3\",\r\n    \"4\",\r\n    \"5\",\r\n    \"6\",\r\n    \"7\",\r\n    \"8\",\r\n    \"9\",\r\n    \"10\",\r\n    \"J\",\r\n    \"Q\",\r\n    \"K\",\r\n  ];\r\n  static SUITS = [\"♠\", \"♥\", \"♣\", \"♦\"];\r\n\r\n  constructor(number, suit) {\r\n    this.number = number;\r\n    this.suit = suit;\r\n    this.value = Math.min(10, this.number);\r\n  }\r\n\r\n  getCardDisplay() {\r\n    return CardObj.NUMBERS[this.number - 1] + CardObj.SUITS[this.suit];\r\n  }\r\n}\r\n\r\nclass Scorer {\r\n  static scoreHand(cards, drawCard) {\r\n    if (cards.length !== 4 || drawCard === undefined) {\r\n      throw new Error(\"Tried to score hand that didn't have 5 cards\");\r\n    }\r\n    let points = 0;\r\n    points += this.pointsFromFifteens(cards.concat(drawCard));\r\n    points += this.pointsFromPairs(cards.concat(drawCard));\r\n    points += this.pointsFromRuns(cards.concat(drawCard));\r\n    points += this.pointsFromKnobs(cards, drawCard);\r\n    points += this.pointsFromFlush(cards.concat(drawCard));\r\n    return points;\r\n  }\r\n\r\n  static pointsFromFlush(allCards) {\r\n    let sameSuits = allCards.map((card, index) =>\r\n      index === allCards.length - 1\r\n        ? false\r\n        : card.suit === allCards[index + 1].suit\r\n    );\r\n    sameSuits.pop();\r\n    return 5 * sameSuits.every((val) => val);\r\n  }\r\n\r\n  static pointsFromKnobs(hand, draw) {\r\n    for (let i = 0; i < hand.length; i++) {\r\n      if (hand[i].number === 11 && hand[i].suit === draw.suit) {\r\n        return 1;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  static pointsFromPairs(allCards) {\r\n    let total = 0;\r\n    for (let i = 0; i < allCards.length; i++) {\r\n      for (let j = i + 1; j < allCards.length; j++) {\r\n        if (allCards[i].number === allCards[j].number) {\r\n          total += 2;\r\n        }\r\n      }\r\n    }\r\n    return total;\r\n  }\r\n\r\n  static numbersBetweenWithout(start, end, without) {\r\n    let toReturn = [];\r\n    let current = start;\r\n    while (current <= end) {\r\n      if (current !== without) {\r\n        toReturn.push(current);\r\n      }\r\n      current++;\r\n    }\r\n    return toReturn;\r\n  }\r\n\r\n  static createFifteensPossibleCombos() {\r\n    let toReturn = [];\r\n    for (let i = 0; i <= 4; i++) {\r\n      toReturn.push(this.numbersBetweenWithout(0, 4, i));\r\n    }\r\n    for (let first = 0; first <= 3; first++) {\r\n      for (let second = first + 1; second <= 4; second++) {\r\n        toReturn.push([first, second]);\r\n      }\r\n    }\r\n    for (let first = 0; first <= 2; first++) {\r\n      for (let second = first + 1; second <= 3; second++) {\r\n        for (let third = second + 1; third <= 4; third++) {\r\n          toReturn.push([first, second, third]);\r\n        }\r\n      }\r\n    }\r\n    return toReturn;\r\n  }\r\n\r\n  static pointsFromFifteens(allCards) {\r\n    let total = 0;\r\n    let indexesOfPossibleFifteens = this.createFifteensPossibleCombos();\r\n    for (let i = 0; i < indexesOfPossibleFifteens.length; i++) {\r\n      let currentSetArray = indexesOfPossibleFifteens[i];\r\n      let currentSum = 0;\r\n      for (let j = 0; j < currentSetArray.length; j++) {\r\n        currentSum += allCards[currentSetArray[j]].value;\r\n        if (currentSum > 15) {\r\n          break;\r\n        }\r\n      }\r\n      total += currentSum === 15;\r\n    }\r\n    return total * 2;\r\n  }\r\n\r\n  static pointsFromRuns(allCards) {\r\n    let numbersOnly = allCards.map((card) => card.number).sort((a, b) => a - b);\r\n\r\n    let noDuplicates = [];\r\n    let duplicates = [];\r\n    for (let i = 0; i < numbersOnly.length; i++) {\r\n      if (noDuplicates.indexOf(numbersOnly[i]) === -1) {\r\n        noDuplicates.push(numbersOnly[i]);\r\n      } else {\r\n        duplicates.push(numbersOnly[i]);\r\n      }\r\n    }\r\n\r\n    let maxStreak = 1;\r\n    let currentNumber = noDuplicates[0];\r\n    let currentStreak = 1;\r\n    for (let i = 1; i < noDuplicates.length; i++) {\r\n      if (noDuplicates[i] === currentNumber + 1) {\r\n        currentStreak++;\r\n        if (currentStreak > maxStreak) {\r\n          maxStreak = currentStreak;\r\n        }\r\n      } else {\r\n        currentStreak = 1;\r\n      }\r\n      currentNumber = noDuplicates[i];\r\n    }\r\n\r\n    let duplicatesNoDuplicates = [];\r\n    for (let i = 0; i < duplicates.length; i++) {\r\n      if (duplicatesNoDuplicates.indexOf(duplicates[i]) === -1) {\r\n        duplicatesNoDuplicates.push(duplicates[i]);\r\n      }\r\n    }\r\n\r\n    let numberToGetCount = duplicatesNoDuplicates[0];\r\n    let count = 0;\r\n    for (let i = 0; i < numbersOnly.length; i++) {\r\n      count += numbersOnly[i] === numberToGetCount;\r\n    }\r\n\r\n    let duplicateLength = count;\r\n    if (duplicateLength === 0) {\r\n      duplicateLength = 1;\r\n    }\r\n\r\n    let numDuplicates = duplicatesNoDuplicates.length;\r\n    if (numDuplicates === 0) {\r\n      numDuplicates = 1;\r\n    }\r\n\r\n    let runLength = maxStreak;\r\n    if (runLength < 3) {\r\n      runLength = 0;\r\n    }\r\n\r\n    return duplicateLength * numDuplicates * runLength;\r\n  }\r\n}\r\n\r\nclass Decider {\r\n  static getFullDeckWithout(cards) {\r\n    let deck = [];\r\n    for (let suit = 0; suit < 4; suit++) {\r\n      for (let number = 1; number <= 13; number++) {\r\n        for (let card of cards) {\r\n          if (!(card.number === number && card.suit === suit)) {\r\n            deck.push(new CardObj(number, suit));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return deck;\r\n  }\r\n\r\n  static removeCard(cards, indexToRemove) {\r\n    let leftOverCards = [...cards];\r\n    leftOverCards.splice(indexToRemove, 1);\r\n    return leftOverCards;\r\n  }\r\n\r\n  static bestDiscards(hand) {\r\n    let handCopy = [...hand];\r\n    if (handCopy.length === 5) {\r\n      let scoresForEachCard = Array(handCopy.length).fill(0);\r\n\r\n      let restOfCards = this.getFullDeckWithout(handCopy);\r\n\r\n      for (\r\n        let removeCardIndex = 0;\r\n        removeCardIndex < handCopy.length;\r\n        removeCardIndex++\r\n      ) {\r\n        let handWithout = this.removeCard(handCopy, removeCardIndex);\r\n        for (\r\n          let drawCardIndex = 0;\r\n          drawCardIndex < restOfCards.length;\r\n          drawCardIndex++\r\n        ) {\r\n          scoresForEachCard[removeCardIndex] += Scorer.scoreHand(\r\n            handWithout,\r\n            restOfCards[drawCardIndex]\r\n          );\r\n        }\r\n      }\r\n\r\n      // this is inside of it's own list so that you can iterate over it\r\n      // the client code in this situation may not know the number of discards\r\n      // (the number of players), so they need to be able to account for 2 or\r\n      // 1 discard\r\n      return [hand[scoresForEachCard.indexOf(Math.max(...scoresForEachCard))]];\r\n    } else if (handCopy.length === 6) {\r\n      let scoresForEachPair = new Array(15).fill(0);\r\n      let restOfCards = this.getFullDeckWithout(handCopy);\r\n      let manualCounter = 0;\r\n\r\n      for (let first = 0; first < handCopy.length - 1; first++) {\r\n        for (let second = first + 1; second < handCopy.length; second++) {\r\n          // you have to remove the second index first, then the first index\r\n          let handWithoutCards = this.removeCard(\r\n            this.removeCard(handCopy, second),\r\n            first\r\n          );\r\n          for (\r\n            let drawCardIndex = 0;\r\n            drawCardIndex < restOfCards.length;\r\n            drawCardIndex++\r\n          ) {\r\n            scoresForEachPair[manualCounter] += Scorer.scoreHand(\r\n              handWithoutCards,\r\n              restOfCards[drawCardIndex]\r\n            );\r\n          }\r\n          manualCounter++;\r\n        }\r\n      }\r\n\r\n      let indexOfMaximum = scoresForEachPair.indexOf(\r\n        Math.max(...scoresForEachPair)\r\n      );\r\n      manualCounter = 0;\r\n      for (let first = 0; first < handCopy.length - 1; first++) {\r\n        for (let second = first + 1; second < handCopy.length; second++) {\r\n          if (manualCounter === indexOfMaximum) {\r\n            return [hand[first], hand[second]];\r\n          }\r\n          manualCounter++;\r\n        }\r\n      }\r\n      throw new Error(\r\n        \"Error finding the optimal cards to discard with 6 cards\"\r\n      );\r\n    } else {\r\n      throw new Error(\r\n        \"Cannot find best discard from \" + hand.length + \" cards\"\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport { CardObj, Decider, Scorer };\r\n","import React from \"react\";\r\nimport \"./Popup.css\";\r\n\r\nfunction Popup({ trigger, setTrigger, children }) {\r\n  return trigger ? (\r\n    <div className=\"popup\">\r\n      <div className=\"popupInner\">\r\n        <button className=\"closeButton\" onClick={() => setTrigger(false)}>\r\n          X\r\n        </button>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n}\r\n\r\nexport default Popup;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"./CardCollection.css\";\r\nimport LeftRightButton from \"./LeftRightButton\";\r\nimport Card from \"./Card\";\r\nimport { CardObj, Decider } from \"../Solver\";\r\nimport Popup from \"./Popup\";\r\n\r\nfunction CardCollection({ numberOfCards }) {\r\n  function generateListOfRandomCards(n) {\r\n    const toReturn = [];\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      let exists = true;\r\n      let numberTry;\r\n      let suitTry;\r\n      while (exists) {\r\n        numberTry = Math.floor(Math.random() * 13) + 1;\r\n        suitTry = Math.floor(Math.random() * 4);\r\n        exists = false;\r\n        for (let j = 0; j < toReturn.length && !exists; j++) {\r\n          if (\r\n            toReturn[j].number === numberTry &&\r\n            toReturn[j].suit === suitTry\r\n          ) {\r\n            exists = true;\r\n          }\r\n        }\r\n      }\r\n      toReturn.push({ number: numberTry, suit: suitTry });\r\n    }\r\n    return toReturn;\r\n  }\r\n\r\n  function nextSuitOfCurrentIndex() {\r\n    const newCards = [...cards];\r\n    const currentSuit = newCards[currentIndex].suit;\r\n    if (currentSuit === 3) {\r\n      newCards[currentIndex].suit = 0;\r\n    } else {\r\n      newCards[currentIndex].suit++;\r\n    }\r\n    setCards(newCards);\r\n  }\r\n\r\n  function nextNumberOfCurrentIndex() {\r\n    const newCards = [...cards];\r\n    const currentNumber = newCards[currentIndex].number;\r\n    if (currentNumber === 13) {\r\n      newCards[currentIndex].number = 1;\r\n    } else {\r\n      newCards[currentIndex].number++;\r\n    }\r\n    setCards(newCards);\r\n  }\r\n\r\n  function previous() {\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(cards.length - 1);\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n    }\r\n  }\r\n\r\n  function next() {\r\n    if (currentIndex === cards.length - 1) {\r\n      setCurrentIndex(0);\r\n    } else {\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n  }\r\n\r\n  function clickedCheck() {\r\n    const cardObjects = cards.map(\r\n      (card) => new CardObj(card.number, card.suit)\r\n    );\r\n    setBestDiscards(Decider.bestDiscards(cardObjects));\r\n    setTrigger(true);\r\n  }\r\n\r\n  const [cards, setCards] = useState(generateListOfRandomCards(numberOfCards));\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [bestDiscards, setBestDiscards] = useState(undefined);\r\n  const [trigger, setTrigger] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <h1>Card number {currentIndex + 1}</h1>\r\n\r\n      <Card\r\n        number={cards[currentIndex].number}\r\n        suit={cards[currentIndex].suit}\r\n        nextSuitFunction={nextSuitOfCurrentIndex}\r\n        nextNumberFunction={nextNumberOfCurrentIndex}\r\n        small={false}\r\n      />\r\n\r\n      <LeftRightButton next={next} previous={previous} />\r\n\r\n      <button onClick={clickedCheck} className=\"checkButton\">\r\n        Check\r\n      </button>\r\n\r\n      {bestDiscards === undefined ? (\r\n        \"\"\r\n      ) : (\r\n        <Popup trigger={trigger} setTrigger={setTrigger}>\r\n          <h2>{\"Best discard\" + (bestDiscards.length === 2 ? \"s\" : \"\")}</h2>\r\n          {bestDiscards.map((card, i) => (\r\n            <Card\r\n              key={i}\r\n              number={card.number}\r\n              suit={card.suit}\r\n              nextSuitFunction={() => false}\r\n              nextNumberFunction={() => false}\r\n              small={true}\r\n            />\r\n          ))}\r\n        </Popup>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CardCollection;\r\n","import React from \"react\";\r\nimport \"./ChooseNumberPlayers.css\";\r\n\r\nfunction ChooseNumberPlayers({ onClick }) {\r\n  return (\r\n    <div className=\"chooseContainer\">\r\n      <h1>How many players?</h1>\r\n      <div className=\"numButtonContainer\">\r\n        <button className=\"numButton\" onClick={() => onClick(2)}>\r\n          2\r\n        </button>\r\n        <button className=\"numButton\" onClick={() => onClick(3)}>\r\n          3\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChooseNumberPlayers;\r\n","import \"./App.css\";\nimport CardCollection from \"./components/CardCollection\";\nimport ChooseNumberPlayers from \"./components/ChooseNumberPlayers\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(-1);\n\n  function chooseNumPlayers(n) {\n    setNumPlayers(n);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {numPlayers === -1 ? (\n          <ChooseNumberPlayers onClick={chooseNumPlayers} />\n        ) : (\n          <CardCollection numberOfCards={numPlayers === 2 ? 6 : 5} />\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}